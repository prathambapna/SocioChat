Steps done

1)npm init
2)setup folders->models,views,routes,controllers,config
3)npm install express(after this can check in package-json)
4)in index.js

//using express to create server (instead of https)
const express=require('express');
const app=express();
const port=8000;

app.listen(port,function(error){
    if(error)
    {
        // console.log('Error:',error);
        // or
        console.log(`Error: $(error)`);
    }
    console.log(`Server is running on the port: ${port}`);
})

5)instead of nodemon index.js in terminal we can use
go in package json
under scripts add new tag "start":"nodemon index.js",
now instead of nodemon index.js use npm start

6)initialising git in terminal
git init
make new file .gitignore
in this write the name of folders file u dont want git to take(maybe bcoz they consume lot space which is not required)
we will write node_modules/
u can check with git status before and after that now node_modules folder is there or not

then finally git add .
git commit -m "first commit:...."


/*
Why should I use express.Router() over app.get,app.post?
organizing routes into separate files, thus promoting modularity
building router specific middleware
It's mostly about code organization / maintainability and scoping middleware.
If all you have are ten routes, you're fine without it, especially if they all need the same middleware. 
At that size it's personal preference, there's no performance advantage or the like.
Once you start having 3-4 or more resources (models) and need routes for each to create,read, update and delete, 
or if some are authenticated and others are not, etc, you start appreciating the organization more.
*/

7)make index.js in route
inside route/index.js

const express=require('express');
const router=express.Router();

//here we r not doing app=express();

module.exports=router;

8)in index.js
//use express router(use before server starts  as middleware)
app.use('/',require('./routes'));

9)in home_controller in controllers
module.exports.home=function(req,res)
{
    return res.end('<h1>Express is up for Codeial!</h1>')
}

10)in routes/index
const homeController=require('../controllers/home_controller');
router.get('/',homeController.home);

11)in terminal
git add .
git commit -m "added controller and routes"

12)in users_controller.js in controllers
module.exports.profile=function(req,res){
    return res.end('<h1>User Profile</h1>');
}

13)create new route in route folder as users.js
const express=require('express');
const router=express.Router();

const usersController=require('../controllers/users_controller');

router.get('/profile',usersController.profile);
module.exports=router;

14) in routes/index.js
router.use('/users',require('./users'));

15)in terminal
git add .
git commit -m "added use_controller and routes"

/*
ejs=>embedded js
It is a simple templating language/engine that lets its user generate HTML with plain javascript.
*/

16)npm install ejs

17)in index.js
app.set('view engine','ejs');
app.set('views','./views')

18)git add .
git commit -m "added view engine ejs"

19)created home.ejs in views
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%= title %>
    </title>
</head>
<body>
    <h1>
        Codeial /<%= title %>
    </h1>
</body>
</html>

20)in home_controller.js
module.exports.home=function(req,res)
{
    //return res.end('<h1>Express is up for Codeial!</h1>')
    return res.render('home',{
        title:'Home'
    });
}

21)user.ejs in view
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%= title %>
    </title>
</head>
<body>
    <h1>
        Codeial /<%= title %>
    </h1>
</body>
</html>

22)in users_controller.js
module.exports.profile=function(req,res){
    res.render('profile',{
        title:'User-profile'
    });
}

23)created _header.ejs 
<header>
    Page Header
</header>

and _footer.ejs
<footer>
    Page footer
</footer>

24)in home.ejs and profile.ejs
<body>
    <%- include('_header'); %>
    <h1>
        Codeial /<%= title %>
    </h1>
    <%- include('_footer'); %>
</body>

25)npm install express-ejs-layouts
//basic layout template
26)in index.js

const expressLayouts=require('express-ejs-layouts');

//use it before using routes as it belongs to view which is going to  be rendered in routes so before it gets rendered we neet to specify layout
app.use(expressLayouts);

27)in layout.ejs in view
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%= title %>
    </title>
</head>
<body>
    <%- include('_header'); %>
    
    <!-- here body is the variable part for different layouts -->
    <%- body %>

    <%- include('_footer'); %>
</body>
</html>

28)change user_profile.ejs and home.ejs as
<!-- whatever u write here will be rendered to body of the layout -->
<h1>
    Codeial /Profile
</h1>

29)index.js
app.use(express.static('./assets'));
30)layout.css in assets
body{
    margin: 0;
    padding: 0;
    text-align: center;
}

31)in layout.ejs
this is for styles required by things other than variable part
<link rel="stylesheet" href="/css/layout.css">
    
32)in index.js for static files to be used by variable parts
//extract style and scripts from subpages into the layout after calling expresslayout
app.set('layout extractStyles',true);
app.set('layout extractScripts',true);

33)in layout.ejs
put style and script tag for static used by variable body
by writing <%-style%> and <%-script %> at appropriate places
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%= title %>
    </title>
    <link rel="stylesheet" href="/css/layout.css">
    <%- style%>
</head>
<body>
    <%- include('_header'); %>
    
    <!-- here body is the variable part for different layouts -->
    <%- body %>

    <%- include('_footer'); %>
    <%- script%>
</body>
</html>


/*
routes and controllers setup done
there is a main route index.js ,and all other routes are used in index.js
after reaching the proper route ,the correspondent controller is called
now controllers renders the view by calling specific view file
each view file only contains body of that file ,that is the header,footer are managed in diff files which are included in the same
now we used express-layout template to define the basic template of the file that would be viewed (rendered)
now layout.ejs
in this we include header,footer and remove from the other files
here we include body as variable which would be sent by other view files which would be rendered at that place
we create layout.css in assets and tells the main file(index.js) to use express.static files from assets
now we do layout extractScripts and extractStyles , this is done as when the body variable of layout would be coming from 
differnt file ,the diff file might have css and js , so now it would be placed in body that is in bw layout file
to make static files to be positioned at proper place we do the same 

*/

34)npm install mongoose
35)inside mongoose.js in config
const mongoose=require('mongoose');
mongoose.connect('mongodb://localhost/codeial_development');

const db=mongoose.connection;
db.on('error',console.error.bind(console,"Error connecting to mongodb"));
db.once('open',function(){
    console.log('connected to database::MongoDB');
});

module.exports=db;

36)in index.js
const db=require('./config/mongoose');

37)creating schema
in user.js in models
const mongooese=require('mongoose');

const userSchema=new mongooese.Schema({
    email:{
        type:String,
        required:true,
        unique:true
    },
    password:{
        type:String,
        required:true
    },
    name:{
        type:String,
        required:true
    }

},
{
    timestamps:true
});

const User=mongooese.model('User',userSchema);
module.exports=User;

38)create user_sign_in.ejs and user_sign_up.ejs in views
<h1>
    Sign In
</h1>

39)to render the view go in user_controller.js
//render the sign up page
module.exports.signUp=function(req,res){
    return res.render('user_sign_up',{
        title:"Codeial | Sign Up"
    })
}
//render the sign in page
module.exports.signIn=function(req,res){
    return res.render('user_sign_in',{
        title:"Codeial | Sign In"
    })
}


40)in user.js in routes add the route
router.get('/sign-up',usersController.signUp);
router.get('/sign-in',usersController.signIn);

41)in user_sign_up.ejs

<form action="/users/create" method="POST">
    <input type="text" name="name" placeholder="Your Name" required>
    <input type="email" name="email" placeholder="Your email" required>
    <input type="password" name="password" placeholder="Password" required>
    <input type="password" name="confirm password" placeholder="Confirm Password" required>
    <input type="submit" value="Sign Up">
</form>

42)in user_sign_in.ejs
<form action="/users/create-session" method="POST">
    <input type="email" name="email" placeholder="Your email" required>
    <input type="password" name="password" placeholder="Password" required>
    <input type="submit" value="Sign In">
</form>

43)//used for params and query in post request
app.use(express.urlencoded());

44)starting with manual authentication
npm install cookie-parser

45)
const cookieParser=require('cookie-parser');
app.use(cookieParser());

46)in users_controller.js in controllers
//importing model
const User=require('../models/user');


//get the signup data
module.exports.create=function(req,res)
{
    //if password not equal to confirm password
    if(req.body.password!=req.body.confirm_password)
    {
        return res.redirect('back');
    }
    User.findOne({email:req.body.email},function(err,user){
        if(err){console.log('error in signing up');return;}

        if(!user)
        {
            User.create(req.body,function(err,user){
                if(err){console.log('error in signing up');return;}
                return res.redirect('/users/sign-in');
            })
        }
        else{
            return res.redirect('back');
        }
    })
} 

47)in users.js in routes
router.post('/create',usersController.create);

48)after signing up in browser now,u can now check in studio3T 

49)commiting and checkout back to master


/*
started with database
installed and setup mongoose as per documentation ,all setups should be done in config
required this connection in index.js
creating a user model 
to create a model first require mongoose,then create a schema ,then use this schema to create a model(check syntax) in user.js in models
install cookie-parser and also call for express.urlencoded() before making a post req
now creating signin and signup page forms ,the action mentioned here would be of type users/create...
so this action would be managed in user.js routes which would then be controlled in users_controller
now in user_controller , first require the model user,then there is a function to create =>User.create which creates a new user of type model User
with information fetching from req.body during this check for some conditions like if user already exists or password ,confirm password matching
and then finally create user and redirect to sign in page(see syntax)
this was all for manual authentication, now we'll use passport library
*/


50)npm install passport
   npm install passport-local 

51)passport-local-strategy.js in config
const passport=require('passport');
const LocalStrategy=require('passport-local').Strategy;
const User=require('../models/user');



//tell passport to use localstrategy
passport.use(new LocalStrategy({
        //always need to define usernameField with the one u use as username in schemma(one which is going to be unique)
        usernameField:'email'
    },
    function(email,password,done)
    {
        //find a user and establish identity
        User.findOne({
            //the first email is of schemma property defined by us, the second one is the one which function takes as argument
            email:email},function(err,user){
                if(err)
                {
                    console.log('Error in finding user -->Passport');
                    return done(err);
                }
                if(!user || user.password!=password){
                    console.log('Invalid Username/Password');
                    return done(null,false);
                }
                return done(null,user);
        });
    }
))

//serializing the user to decide which key is to be kept in the cookies
//basically after finding the user ,alloting cookie to it based on its id and then passport encrypts it automatically
passport.serializeUser(function(user,done){
    done(null,user.id);
});

//deserializing the user from the key in the cookies
passport.deserializeUser(function(id,done){
    User.findById(id,function(err,user){
        if(err)
        {
            console.log('Error in finding user -->Passport');
            return done(err);
        }
        return done(null,user); 
    });
});

module.exports=passport;

52)npm install express-session

53)index.js

//used for session cookie
const session=require('express-session');
const passport=require('passport');
const passportLocal=require('./config/passport-local-strategy');

//after setting the views,use session as middleware 
app.use(session({
    name:'codeial',
    //todo the secret before deployment in production mode
    secret:'blahsomething',
    saveUninitialized:false,
    resave:false,
    cookie:{
        maxAge:(1000*60*100)
        //100 min =>1000 millisec,60sec
    }
}))
app.use(passport.initialize());
app.use(passport.session());

54)in use_controller
//create session for sign in
module.exports.createSession=function(req,res)
{
    return res.redirect('/');
} 

55)in user.js in routes
//use passport as a middleware to authenticate

router.post('/create-session',passport.authenticate(
    'local',
    {failureRedirect:'/users/sign-in'}
),usersController.createSession);

/*
basically when create-session called it authenticates if done then call usercontroller.createSession otherwise redirect to sign-in
*/

55)in passport.js
//sending data of logged in user to views

//step 1]check if the user is authenticated
passport.checkAuthentication=function(req,res,next){
    //if the user is signed in ,then pass on the request to the next function(controllers action)
    if(req.isAuthenticated()){
        return next();
    }
    //if the user is not signed in
    return res.redirect('/users/sign-in');
}
passport.setAuthenticatedUser=function(req,res,next){
    if(req.isAuthenticated()){
        //req.user contains the current signed in  user from the session cookie and we are just sending this to the locals for the views
        res.locals.user=req.user;
    }
    next();
}

56)in users.js routes
router.get('/profile',passport.checkAuthentication,usersController.profile);

57)index.js
app.use(passport.setAuthenticatedUser)


58)in profile.ejs
<!-- user available bcoz we made res.locals.user=req.user in passport.js -->
<p><%= user.name%></p>
<p><%= user.email%></p>

59)in use_controller.js
//render the sign up page
module.exports.signUp=function(req,res){

    //we only want user to access signup page when not signed in that is not authenticated
    //otherwise redirect to profile page
    if(req.isAuthenticated()){
        return res.redirect('/users/profile');
    }
    return res.render('user_sign_up',{
        title:"Codeial | Sign Up"
    })
}
//render the sign in page
module.exports.signIn=function(req,res){
    if(req.isAuthenticated()){
        return res.redirect('/users/profile');
    }
    return res.render('user_sign_in',{
        title:"Codeial | Sign In"
    })
}

60)npm install connect-mongo

61)index.js
//using mongostore to store the session cookies so that after every restart of server user does not gets logged out that is store all the session cookies in database
const MongoStore= require('connect-mongo');



//after setting the views,use session as middleware 
//mongo store is udes to store the session cookie in db
app.use(session({
    name:'codeial',
    //todo the secret before deployment in production mode
    secret:'blahsomething',
    saveUninitialized:false,
    resave:false,
    cookie:{
        maxAge:(1000*60*100)
        //100 min =>1000 millisec,60sec
    },
    store:MongoStore.create({
            //got this url from mongodb atlas application
            mongoUrl:'mongodb://localhost:27017',
            autoRemove:'disabled'
    },function(err)
    {
        console.log(err || 'connect-mongo-db setup ok');
    })
}))

62)header.ejs
<ul>
        <% if (locals.user) {%>
            <li>
                <a href="/users/profile">
                    <%=user.name%>
                </a>
            </li>
            <li>
                <a href="/users/sign-out">Sign Out</a>
            </li>
        <%}else{%>
            <li>
                <a href="/users/sign-in">Sign In</a>
            </li>
            <li>
                <a href="/users/sign-up">Sign Up</a>
            </li>
        <% } %>
    </ul>

63)user_controller.js

module.exports.destroySession=function(req,res){
    req.logout(function(err)
    {
        if(err){return res.redirect('back');}
        return res.redirect('/');
    });
}

64)user.js in routes
router.get('/sign-out',usersController.destroySession);

/*
Passport
library used to authenticate users
passport local authenticates based on two parameters username and password
create the directed way to initialize passport local shown in documentation
after that serialize and deserialize the user =>serializing the user to decide which key is to be kept in the cookies,
basically after finding the user ,alloting cookie to it based on its id and then passport encrypts it automatically
deserializing the user from the key in the cookies
Now instead of using cookie-parser we will now use express-session as it stores the cookie in server also with unlimited data and you can read about session over cookies difference
after setting the views,use session as middleware 
now use the session=>give name to the session,secret which would be used to serialize user,set the cookie properties like maxAge
now call for passport.initialize and passport.session()
now can use passport to authenticate signin process by using passport as middleware to direct to controller from routes
make checkAuthentication function which let user go to next page if authenticated
also make setAuthenticatedUser function and there set the locals in response with req.user
tell index.js to use setAuthenticatedUser, now update the signup,signin page by if user already authenticated then automatically redirect to next required page
=> we only want user to access signup page when not signed in that is not authenticated,otherwise redirect to profile page
now since after every server refresh the sessions are lost to store the sessions in database we use connect-mongo 
If you don't want to use a database for your chat, you should store the messages into a simple hash. But keep in mind,
if you restart your node application, they will be lost.MongoStore (or RedisStore) allows you to store the Express sessions into MongoDB/Redis
instead of using the MemoryStore, which is not designed for a production environment.
after setting it update the app.use(session) part by setting store:Mongostore......
now when all set can change header ejs too and say that if user is authenticated then show profile and signout opt otherwise signin,signup opt
to signout we use req.logout this  only removes the user from the session,not the other things eg:=>
Before logout:
"{"cookie":{"originalMaxAge":259200000,"expires":"2014-03-21T22:03:55.265Z","httpOnly":true,"path":"/"},"passport":{"user":"bn"}}"
After logout:
"{"cookie":{"originalMaxAge":259200000,"expires":"2014-03-21T22:04:01.148Z","httpOnly":true,"path":"/"},"passport":{}}"

user has been removed but other cookies are still there and the complete session is not destroyed
*/

65)including sass
npm install node-sass-middleware

66)index.js
// setting up sass
const sassMiddleware=require('node-sass-middleware');
app.use(sassMiddleware({
    src:'./assets/scss',
    dest:'./assets/css',
    debug:true,
    outputStyle:'extended',
    prefix:'/css'
}))


67)moved two css files into scss and changing extension to .scss
68)header.ejs edited
<header>
    <div id="logo">
        <p><span class="symb">&lt</span>CODEIAL<span class="symb">/&gt</span></p>
    </div>
    <div id="auth">
        <ul>
            <% if (locals.user) {%>
                <li>
                    <a href="/users/profile">
                        PROFILE
                    </a>
                </li>
                <li>
                    <a href="/users/sign-out">SIGN OUT</a>
                </li>
            <%}else{%>
                <li>
                    <a href="/users/sign-in">Sign In</a>
                </li>
                <li>
                    <a href="/users/sign-up">Sign Up</a>
                </li>
            <% } %>
        </ul>
    </div>
</header>

69)header.scss
header{
    display: flex;
    justify-content: space-between;
    height: 75px;
    background-color: rgb(59, 50, 219);
    #auth{
        margin-right: 3%;
        width: auto;
        display: flex;
        align-items: center;
        ul li{
            list-style: none;
            text-decoration: none;
            display: inline-block;
            padding: 0.3rem;
            a{
                color: aliceblue;
                text-decoration: none;
                font-weight: 500;
                font-size: 1rem;
                letter-spacing: 0.5px;
                font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
            }
        }
    }
    #logo{
        margin-left: 3%;
        display: flex;
        align-items: center;
        justify-content: center;
        p{
            font-weight: 700;
            font-size: 1.6rem;
            letter-spacing: 1px;
            color: white;
            font-family: 'Courier New', Courier, monospace;
            .symb{
                color: rgb(227, 247, 6);
                margin-right: 0.5rem;
            }
        }
    }
}

/*
included sass(npm install  node-sass-middleware)
writing scss is much more easier than long css
SCSS : Syntactically Awesome Style Sheet is the superset of CSS. SCSS is the more advanced version of CSS

const sassMiddleware=require('node-sass-middleware');
app.use(sassMiddleware({
    src:'./assets/scss',
    dest:'./assets/css',
    debug:true,
    outputStyle:'extended',
    prefix:'/css'
}))
src - (String) Source directory used to find .scss or .sass files.
dest - (String) Destination directory used to output .css files (when undefined defaults to src).
prefix - (String) It will tell the sass middleware that any request file will always be prefixed with <prefix> and this prefix should be ignored.
*/

70)in post.js in models
const mongoose=require('mongoose');
const postSchema=new mongoose.Schema({
    content:{
        type:String,
        required:true
    },
    //here linking with user schema as post would be done by a user
    user:{
        //type=in robo3t u can see each user has objectid we will make of that type
        type:mongoose.Schema.Types.ObjectId,
        ref:'User'
    }
},
{
    timestamps:true
});

const Post=mongoose.model('Post',postSchema);
module.exports=Post;

71)home.ejs in views
<h1>
    Codeial /<%= title %>
</h1>
<section id="feed-posts">
    <h2>Posts</h2>
    <form action="/posts/create" id="new-post-form" method="POST">
        <textarea name="content" cols="30" rows="3" placeholder="Type Here..."></textarea>
        <input type="submit" value="Post">
    </form>
</section>

72)posts_controller.js in controllers
const Post=require('../models/post');
module.exports.create=function(req,res)
{
    //we have got the post schema above
    //now can access content,user
    //here user._id (can refer in robo3t)
    //req.body.content is bcoz we hv given name of form as content
    Post.create({
        content:req.body.content,
        user:req.user._id
    },function(err,post){
        if(err){console.log('error in creating post');return;}
        return res.redirect('back');
    })
}

73)in posts.js in router
const express=require('express');
const router=express.Router();

const postsController=require('../controllers/posts_controller');

router.post('/create',postsController.create);
module.exports=router;

74)index.js in routes
router.use('/posts',require('./posts'));

75)home_controller.js
const Post=require('../models/post');
module.exports.home=function(req,res)
{

    Post.find({},function(err,posts)
    {
        return res.render('home',{
            title:'Codeial | Home',
            posts:posts
        });
    })
}

76)home.ejs
<h1>
    Codeial /<%= title %>
</h1>
<section id="feed-posts">
    <h2>Posts</h2>
    <form action="/posts/create" id="new-post-form" method="POST">
        <textarea name="content" cols="30" rows="3" placeholder="Type Here..."></textarea>
        <input type="submit" value="Post">
    </form>

    //code changed from here
    <div id="posts-list-container">
        <ul>
            <%for(post of posts){%>
                <li>
                    <%= post.content%>
                </li>
            <%}%>
        </ul>
    </div>
</section>

77)home_controller.js
const Post=require('../models/post');
module.exports.home=function(req,res)
{

    //with this if we do post.user in home.ejs it only gives id (since we hv set user:req.user._id in post_controller)of the user,but if we need name,email,timecreated we need to populate the user
    
    // Post.find({},function(err,posts)
    // {
    //     return res.render('home',{
    //         title:'Codeial | Home',
    //         posts:posts
    //     });
    // })


    //populate the user of each post
    Post.find({}).populate('user').exec(function(err,posts)
    {
        return res.render('home',{
            title:'Codeial | Home',
            posts:posts
        });
    })
}

78)home.ejs
<h1>
    Codeial /<%= title %>
</h1>
<section id="feed-posts">
    <h2>Posts</h2>
    //only if user is signed in view post input area
    <%if(locals.user){%>
        <form action="/posts/create" id="new-post-form" method="POST">
            <textarea name="content" cols="30" rows="3" placeholder="Type Here..."></textarea>
            <input type="submit" value="Post">
        </form>
    <%}%>
    <div id="posts-list-container">
        <ul>
            <%for(post of posts){%>
                <li>
                    <p>
                        <%= post.content%>
                        <br>
                        <small>
                            <%=post.user.name%>
                        </small>
                    </p>
                </li>
            <%}%>
        </ul>
    </div>
</section>

79)in posts.js in routes
//check if user is authenticated then only create post
router.post('/create',passport.checkAuthentication,postsController.create);

80)comment.js in model //creating comments schema
const mongoose=require('mongoose');
const commentSchema=new mongoose.Schema({
    content:{
        type:String,
        required:true
    },
    //comment belongs to a user
    user:{
        type:mongoose.Schema.Types.ObjectId,
        ref:'User'
    },
    post:{
        type:mongoose.Schema.Types.ObjectId,
        ref:'Post'
    }
},
{
    timestamps:true
});

const Comment=mongoose.model('Comment',commentSchema);
module.exports=Comment;

81)in post.js in models
//added comments array in schema

const postSchema=new mongoose.Schema({
    content:{
        type:String,
        required:true
    },
    //here linking with user schema as post would be done by a user
    user:{
        //type=in robo3t u can see each user has objectid we will make of that type
        type:mongoose.Schema.Types.ObjectId,
        ref:'User'
    },
    //include the array of ids of all comments in this post schema itself
    comments:[{
        type:mongoose.Schema.Types.ObjectId,
        ref:'Comment'
    }]
},
{
    timestamps:true
});

82)home.ejs
in post-list-container added comments section
<div id="posts-list-container">
        <ul>
            <%for(post of posts){%>
                <li>
                    <p>
                        <%= post.content%>
                        <br>
                        <small>
                            <%=post.user.name%>
                        </small>
                    </p>
                    <div class="post-comments">
                        <%if(locals.user){%>
                            <form action="/comments/create" method="POST">
                                <input type="text" name="content" placeholder="Type Here to add comment...">
                                <input type="hidden" name="post" value="<%=post._id%>" >
                                <input type="submit" value="Add Comment">
                            </form>
                        <%}%>
                    </div>
                </li>
            <%}%>
        </ul>
    </div>

83)comments_controller.js

const Comment=require('../models/comment');
const Post=require('../models/post');
module.exports.create=function(req,res){
    //req.body.post as we hv given name as post in input with type hidden
    Post.findById(req.body.post,function(err,post){
        if(post)
        {
            Comment.create({
                content:req.body.content,
                post:req.body.post,
                user:req.user._id
            },function(err,comment){

                //updating the posts schema as well that is pushing the comment in the comments array
                post.comments.push(comment);
                post.save();

                res.redirect('/');
            });
        }
    })
}

84)comments.js in routes
const express=require('express');
const router=express.Router();
const passport=require('passport');
const commentsController=require('../controllers/comments_controller');


//check if user is authenticated then only create post
router.post('/create',passport.checkAuthentication,commentsController.create);
module.exports=router;

85)index.js in routes
router.use('/comments',require('./comments'));

86)home_controller.js 
updated the populte part
//populate the user of each post
    //also populate comments and done by which user
    Post.find({})
    .populate('user')
    .populate({
        path:'comments',//as we have name the array in post schema as comments
        populate:{
            path:'user'//name the user in post schema as user
        }
    })
    .exec(function(err,posts)
    {
        return res.render('home',{
            title:'Codeial | Home',
            posts:posts
        });
    })

87)updated home.ejs
<h1>
    Codeial /<%= title %>
</h1>
<section id="feed-posts">
    <h2>Posts</h2>
    <!-- only if user is signed in view post input area -->
    <%if(locals.user){%>
        <form action="/posts/create" id="new-post-form" method="POST">
            <textarea name="content" cols="30" rows="3" placeholder="Type Here..." required></textarea>
            <input type="submit" value="Post">
        </form>
    <%}%>
    <div id="posts-list-container">
        <ul>
            <%for(post of posts){%>
                <li>
                    <p>
                        <%= post.content%>
                        <br>
                        <small>
                            <%=post.user.name%>
                        </small>
                    </p>
                    <div class="post-comments">
                        <%if(locals.user){%>
                            <form action="/comments/create" method="POST">
                                <input type="text" name="content" placeholder="Type Here to add comment..." required>
                                <input type="hidden" name="post" value="<%=post._id%>" >
                                <input type="submit" value="Add Comment">
                            </form>
                        <%}%>
                        <div class="post-comments-list">
                            <ul id="post-comments-<%=post._id%>">
                                <%for(comment of post.comments){%>
                                    <p>
                                        <%=comment.content%>
                                        <br>
                                        <small>
                                            <%=comment.user.name%>
                                        </small>
                                    </p>
                                <%}%>
                            </ul>
                        </div>
                    </div>
                </li>
            <%}%>
        </ul>
    </div>
</section>


88)in post_controller
//starting to delete the post

const Comment=require('../models/comment');

//will be deleting according to action=> /posts/destroy/:id
//in params there would be id of post
module.exports.destroy=function(req,res){
    Post.findById(req.params.id,function(err,post){
        //.id means converting the object id (._id) to string
        if(post.user==req.user.id)
        {
            post.remove();
            Comment.deleteMany({
                post:req.params.id
            },function(err){
                return res.redirect('back');
            });
        }else{
            return res.redirect('back');
        }
    });
}

89)post.js in routes
router.get('/destroy/:id',passport.checkAuthentication,postsController.destroy);

90)home.ejs

//added delete post option in views ,check home.ejs file to know where it has been added
 <% if(locals.user && locals.user.id==post.user.id){%>
    <small>
        <a href="/posts/destroy/<%=post.id%>">X</a>
    </small>
<%}%>

91)comments_controller.js
//deleting comment
module.exports.destroy=function(req,res){
    Comment.findById(req.params.id,function(err,comment){
        if(comment.user==req.user.id){
            //since we also need to delete comment from the comments array of that particular post
            let postId=comment.post;
            comment.remove();
            //update by pull out from comments array the id with req.params.id that is comment id
            Post.findByIdAndUpdate(postId,{$pull:{comments:req.params.id}},function(err,post){
                return res.redirect('back');
            });
        }
        else{
            return res.redirect('back');
        }
    })
}

92)comment.js in routes
router.get('/destroy/:id',passport.checkAuthentication,commentsController.destroy);

93)home.ejs updated

 <%for(comment of post.comments){%>
    <p>
        <% if(locals.user && locals.user.id==comment.user.id){%>
            <small>
                <a href="/comments/destroy/<%=comment.id%>">X</a>
            </small>
        <%}%>
        <%=comment.content%>
        <br>
        <small>
            <%=comment.user.name%>
        </small>
    </p>
<%}%>

94)created partials for comments and posts that is included them in another file named as _comment.ejs and _post.ejs ,checkit out

95)home_controller

//to get all the users on the home page
    //populate the user of each post
    //also populate comments and done by which user
    Post.find({})
    .populate('user')
    .populate({
        path:'comments',//as we have name the array in post schema as comments
        populate:{
            path:'user'//name the user in post schema as user
        }
    })
    .exec(function(err,posts)
    {
        User.find({},function(err,users){
            return res.render('home',{
                title:'Codeial | Home',
                posts:posts,
                //getting all users
                all_users:users
            });
        })
    })
}

96)home.ejs
<section id="user-friends">
    <h4>Friends</h4>
    <% for(u of all_users){%>
        <p>
            <a href="/users/profile/<%=u.id%>"><%= u.name%></a>
        </p>
    <%}%>
</section>

97)user.js in routes
router.get('/profile/:id',passport.checkAuthentication,usersController.profile);

98)updated profile action in user_controller
module.exports.profile=function(req,res){
    User.findById(req.params.id,function(err,user){
            return res.render('profile',{
                title:'User Profile',
                profile_user:user
        });
    })
}

99)profile.ejs

//viewed links to profile of users
<p><%= profile_user.name%></p>
<p><%= profile_user.email%></p>

100)profile.ejs
different view of profile page for self than that of friends
<% if(user.id==profile_user.id){ %>
    <!-- if user matches then show the updation form otherwise just show profile info -->
    <form action="/users/update/<%=profile_user.id%>" method:"POST">
        <input type="text" name="name" placeholder="Your Name" value="<%=profile_user.name%>" required>
        <input type="email" name="email" placeholder="Your Email" value="<%=profile_user.email%>" required>
        <input type="submit" value="UPDATE">
    </form>
<%}else{%>
    <p><%= profile_user.name%></p>
    <p><%= profile_user.email%></p>
<%}%>

101)user_controller.js
module.exports.update=function(req,res){
    if(req.user.id==req.params.id){
        User.findByIdAndUpdate(req.params.id,req.body,function(err,User){
            return res.redirect('back');
        });
    }else{
        //if someone tries to fiddle by inspect nd then change id then show http 401 unauthorized part
        return res.status(401).send('Unauthorized');
    }
}

102)user.js in routes
router.post('/update/:id',passport.checkAuthentication,usersController.update);

103)home.scss

//also changed home.ejs a bit have a look 
#home-container{
    display: flex;
    height: 100%;
    #feed-posts{
        width: 70%;
        padding: 10px;

    }

    #user-friends{
        width:30%;
        padding:10px;
        border-left: 1px solid lightgrey;
        height: 100%;
    }
}


//NOW CHANGING ALL CONTROLLER CODES TO ASYNC AWAIT 
//WHEREEVER THERE IS NESTING OF CALLBACKS(CALLBACK HELL) ,IF ONLY ONE CALLBACK THEN NOT NEEDED
//IN CALLBACK THE VARIABLE WE USE IF NEEDED SO GET IT IN LET VARIABLE(POSTS,COMMENT,ETC)


104)home_controller
changed the code to look neat and handle errors


module.exports.home= async function(req,res)
{
    try{
        let posts=await Post.find({})
        .populate('user')
        .populate({
            path:'comments',//as we have name the array in post schema as comments
            populate:{
                path:'user'//name the user in post schema as user
            }
        });

        let users=await User.find({});

        return res.render('home',{
            title:'Codeial | Home',
            posts:posts,
            all_users:users
        });
    }catch(err){
        console.log('Error',err);
        return; 
    }
}

105)posts_controller
const Post=require('../models/post');
const Comment=require('../models/comment');
module.exports.create=async function(req,res)
{
    try{
        await Post.create({
            //we have got the post schema above
            //now can access content,user
            //here user._id (can refer in robo3t)
            //req.body.content is bcoz we hv given name of form as content
            content:req.body.content,
            user:req.user._id
        });
        return res.redirect('back');
    }catch(err)
    {
        console.log('Error',err);
    }
}

//will be deleting according to action=> /posts/destroy/:id
//in params there would be id of post
module.exports.destroy=async function(req,res){
    try{
        let post=await Post.findById(req.params.id);
        //.id means converting the object id (._id) to string
        if(post.user==req.user.id)
        {
            post.remove();
            await Comment.deleteMany({
                post:req.params.id
            });
            return res.redirect('back');
        }else{
            return res.redirect('back');
        }
    }catch(err)
    {
        console.log('Error',err);
    }
    
}

106)comments_controller

const Comment=require('../models/comment');
const Post=require('../models/post');

module.exports.create=async function(req,res){
    try{
        //req.body.post as we hv given name as post in input with type hidden
        let post=await Post.findById(req.body.post)
        if(post)
        {
            let comment=await Comment.create({
                content:req.body.content,
                post:req.body.post,
                user:req.user._id
            });
            //updating the posts schema as well that is pushing the comment in the comments array
            post.comments.push(comment);
            post.save();

            res.redirect('/');
        }
    }catch(err)
    {
        console.log('Error',err);
    }
}

module.exports.destroy=async function(req,res){
    try{
        let comment=await Comment.findById(req.params.id);
        if(comment.user==req.user.id){
            //since we also need to delete comment from the comments array of that particular post
            let postId=comment.post;
            comment.remove();
            //update by pull out from comments array the id with req.params.id that is comment id
            let post=await Post.findByIdAndUpdate(postId,{$pull:{comments:req.params.id}});
            return res.redirect('back');
        }
        else{
            return res.redirect('back');
        }
    }catch(err)
    {
        console.log('Error',err);
    }
}


/*
using flash library for notifications

set up the library flash
used it after session being used
setup msgs in users_controller
then to pass on these msgs to html/ejs created a middleware
to put the msg from req to res
in middleware it fetches from req and put it in locals
now we used it in index.js=>app.use(customMware.setFlash)
now include it in view that is include it in layout after header
*/

107)using flash library for notifiactions
npm install connect-flash

108)index.js

const flash=require('connect-flash');

//use flash after session is being used,bcoz flash uses session cookies
//whenever a session is created it will notify once as in if u r sign in and refresh it should not again show logged in successfully, but only when u hv signed out or session has been expired
app.use(flash());

109)user_controller
added flash messages

//create session for sign in
module.exports.createSession=function(req,res)
{
    req.flash('success','Logged in Successfully');
    return res.redirect('/');
} 

module.exports.destroySession=function(req,res){
    req.logout(function(err)
    {
        if(err){return res.redirect('back');}
        
        req.flash('success','You have logged out!');
        return res.redirect('/');
    });
}

110)middleware.js in config

//to get the flash msg from req and put it into res
module.exports.setFlash=function(req,res,next)
{
    res.locals.flash={
        'success':req.flash('success'),
        'error':req.flash('error')
    }
    next();
}

111)index.js

//called middleware and used it
//check the location where they r used
const customMware=require('./config/middleware');
app.use(customMware.setFlash);

112)layout.ejs
<!-- if flash has success msg and that to non empty -->
<% if(flash.success && flash.success.length>0){ %>
    <h5>
        <%= flash.success%>
    </h5>
<%}%>   

113)using noty js to beautify our notifiactions

in layout.ejs

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/noty/3.1.4/noty.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/noty/3.1.4/noty.min.js"></script>
    
<script>
//  if flash has success msg and that to non empty
<% if(flash.success && flash.success.length>0){ %>
    new Noty({
        theme:'relax',
        text: "<%=flash.success%>",
        type:'success',
        layout:'topRight',
        timeout:1500
    }).show();
<%}%> 
<% if(flash.error && flash.error.length>0){ %>
    new Noty({
        theme:'relax',
        text: "<%=flash.error%>",
        type:'error',
        layout:'topRight',
        timeout:1500
    }).show();
<%}%> 
</script>

114)passport-local.js

//edited to use noty js
//passReqToCallback:true
//chnaged func arguments to=>function(req,email,password,done)
//then used flash


//tell passport to use localstrategy
passport.use(new LocalStrategy({
        //always need to define usernameField with the one u use as username in schemma(one which is going to be unique)
        usernameField:'email',
        //this will allow to pass req variable to callback
        passReqToCallback:true
    },
    function(req,email,password,done)
    {
        //find a user and establish identity
        User.findOne({
            //the first email is of schemma property defined by us, the second one is the one which function takes as argument
            email:email},function(err,user){
                if(err)
                {
                    req.flash('error',err);
                    return done(err);
                }
                if(!user || user.password!=password){
                    req.flash('error','Invalid Username/Password');
                    return done(null,false);
                }
                return done(null,user);
        });
    }
))

115)updated user_controller,post_controller,comments_controller
with flash msgs

116)including jquery ajax(as whenever we post or comment whole page refreshes which we dont want ,we want only that part gets updated not refreshed the whole page)
in layout.ejs 
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

117)in home.ejs
<script src="/js/home_posts.js"></script>

118)home_posts.js in js in assets
{    
    //method to submit the form data for new post using ajax
    let createPost=function(){
        //getting form from home.ejs id
        let newPostForm=$('#new-post-form');
        //preventing default action of submit as we need to submit through ajax
        newPostForm.submit(function(e){
            e.preventDefault();
            //now submitting through ajax
            $.ajax({
                type:'post',
                url:'/posts/create',
                //converts post data into json like content becomes key and value is the one entered
                data:newPostForm.serialize(),
                success:function(data){
                    console.log(data);
                },error:function(error){
                    console.log(error.responseText);
                }
            });
        });
    }

    //method to create a post in dom
    
    createPost();
} 

119)post_controller.js
updated with req.xhr
module.exports.create=async function(req,res)
{
    try{
        let post=await Post.create({
            //we have got the post schema above
            //now can access content,user
            //here user._id (can refer in robo3t)
            //req.body.content is bcoz we hv given name of form as content
            content:req.body.content,
            user:req.user._id
        });

        //if the req is in xhml http request i.e via ajax
        if(req.xhr){
            return res.status(200).json({
                data:{
                    post:post
                },
                message:"Post created!"
            })
        }

        req.flash('success','Post published!');
        return res.redirect('back');
    }catch(err)
    {
        req.flash('error',err);
        return res.redirect('back');
    }
}

120)home_posts.js in js assets
{    
    //method to submit the form data for new post using ajax
    let createPost=function(){
        //getting form from home.ejs id
        let newPostForm=$('#new-post-form');
        //preventing default action of submit as we need to submit through ajax
        newPostForm.submit(function(e){
            e.preventDefault();
            //now submitting through ajax
            $.ajax({
                type:'post',
                url:'/posts/create',
                //converts post data into json like content becomes key and value is the one entered
                data:newPostForm.serialize(),
                success:function(data){
                    let newPost=newPostDom(data.data.post);
                    $('#posts-list-container>ul').prepend(newPost);
                },error:function(error){
                    console.log(error.responseText);
                }
            });
        });
    }

    //method to create a post in dom
    let newPostDom=function(post){
        //copied from _post.ejs and removed unnecessary checks
        return $(`
                    <li id="post-${post._id}">
                    <p>
                        <small>
                            <a class="delete-post-button" href="/posts/destroy/${post.id}">X</a>
                        </small>

                        ${ post.content}
                        <br>
                        <small>
                        ${post.user.name$}
                        </small>
                    </p>
                    <div class="post-comments">
                        <form action="/comments/create" method="POST">
                            <input type="text" name="content" placeholder="Type Here to add comment..." required>
                            <input type="hidden" name="post" value="${post._id}" >
                            <input type="submit" value="Add Comment">
                        </form>

                        <div class="post-comments-list">
                            <ul id="post-comments-${post._id}"> 
                            </ul>
                        </div>
                    </div>
                </li>
        `)
    }

    createPost();
} 

121)home_controller.js
added sort func to creation of post
module.exports.home= async function(req,res)
{
    try{
        let posts=await Post.find({})
        .sort('-createdAt')//sort acc to time of creation=>latest one showimg first
        .populate('user')
        .populate({
            path:'comments',//as we have name the array in post schema as comments
            populate:{
                path:'user'//name the user in post schema as user
            }
        });

        let users=await User.find({});

        return res.render('home',{
            title:'Codeial | Home',
            posts:posts,
            all_users:users
        });
    }catch(err){
        console.log('Error',err);
        return; 
    }
}

122)home_posts.js in assets js
{    
    //method to submit the form data for new post using ajax
    let createPost=function(){
        //getting form from home.ejs id
        let newPostForm=$('#new-post-form');
        //preventing default action of submit as we need to submit through ajax
        newPostForm.submit(function(e){
            e.preventDefault();
            //now submitting through ajax
            $.ajax({
                type:'post',
                url:'/posts/create',
                //converts post data into json like content becomes key and value is the one entered
                data:newPostForm.serialize(),
                success:function(data){
                    //data.data.post can be seen as when we learnt api ,u can console log data on that u can see data in that post
                    let newPost=newPostDom(data.data.post);
                    $('#posts-list-container>ul').prepend(newPost);
                    deletePost($(' .delete-post-button',newPost));//space before class name here to adjust newPost
                },error:function(error){
                    console.log(error.responseText);
                }
            });
        });
    }

    //method to create a post in dom
    let newPostDom=function(post){
        //copied from _post.ejs and removed unnecessary checks
        return $(`
                    <li id="post-${post._id}">
                    <p>
                        <small>
                            <a class="delete-post-button" href="/posts/destroy/${post._id}">X</a>
                        </small>

                        ${ post.content}
                        <br>
                        <small>
                        ${post.user.name$}
                        </small>
                    </p>
                    <div class="post-comments">
                        <form action="/comments/create" method="POST">
                            <input type="text" name="content" placeholder="Type Here to add comment..." required>
                            <input type="hidden" name="post" value="${post._id}" >
                            <input type="submit" value="Add Comment">
                        </form>

                        <div class="post-comments-list">
                            <ul id="post-comments-${post._id}"> 
                            </ul>
                        </div>
                    </div>
                </li>
        `)
    }

    //method to delete a post from dom using ajax
    let deletePost=function(deleteLink){
        $(deleteLink).click(function(e){
            e.preventDefault();

            $.ajax({
                type:'get',
                url:$(deleteLink).prop('href'),//get href part from a tag , that is we hv passed a tag as deletelink
                success:function(data){
                    $(`#post-${data.data.post_id}`).remove();
                },error:function(error){
                    console.log(error.responseText);
                }
            })
        })
    }




    createPost();
} 

123)post_controller
//added req.xhr opt

module.exports.destroy=async function(req,res){
    try{
        let post=await Post.findById(req.params.id);
        //.id means converting the object id (._id) to string
        if(post.user==req.user.id)
        {
            post.remove();
            await Comment.deleteMany({
                post:req.params.id
            });

            if(req.xhr)
            {
                return res.status(200).json({
                    data:{
                        post_id:req.params.id
                    },
                    message:"Post Deleted"
                });
            }

            req.flash('success','Post and associated comments deleted!')
            return res.redirect('back');
        }else{
            req.flash('error','You cannot delete this post');
            return res.redirect('back');
        }
    }catch(err)
    {
        req.flash('error',err);
        return res.redirect('back');
    }
    
}


124)home_posts.js assets js
{
     //method to submit the form data for new post using ajax
    let createPost=function(){
        //getting form from home.ejs id
        let newPostForm=$('#new-post-form');
        //preventing default action of submit as we need to submit through ajax
        newPostForm.submit(function(e){
            e.preventDefault();
            //now submitting through ajax
            $.ajax({
                type:'post',
                url:'/posts/create',
                //converts post data into json like content becomes key and value is the one entered
                data:newPostForm.serialize(),
                success:function(data){
                    // console.log(data);
                    //data.data.post can be seen as when we learnt api ,u can console log data on that u can see data in that post
                    let newPost=newPostDom(data.data.post);
                    $('#posts-list-container>ul').prepend(newPost);
                    deletePost($(' .delete-post-button',newPost));//space before class name here to adjust newPost
                    
                    new Noty({
                        theme: 'relax',
                        text: "Post published!",
                        type: 'success',
                        layout: 'topRight',
                        timeout: 1500
                        
                    }).show();

                },error:function(error){
                    console.log(error.responseText);
                }
            });
        });
    }

    //method to create a post in dom
    let newPostDom=function(post){
        //copied from _post.ejs and removed unnecessary checks
        return $(`
                    <li id="post-${post._id}">
                    <p>
                        <small>
                            <a class="delete-post-button" href="/posts/destroy/${post._id}">X</a>
                        </small>

                        ${ post.content}
                        <br>
                        <small>
                        ${post.user.name}
                        </small>
                    </p>
                    <div class="post-comments">
                        <form id="post-${ post._id }-comments-form" action="/comments/create" method="POST">
                            <input type="text" name="content" placeholder="Type Here to add comment..." required>
                            <input type="hidden" name="post" value="${post._id}" >
                            <input type="submit" value="Add Comment">
                        </form>

                        <div class="post-comments-list">
                            <ul id="post-comments-${post._id}"> 
                            </ul>
                        </div>
                    </div>
                </li>
        `)
    }

    //method to delete a post from dom using ajax
    let deletePost=function(deleteLink){
        $(deleteLink).click(function(e){
            e.preventDefault();

            $.ajax({
                type:'get',
                url:$(deleteLink).prop('href'),//get href part from a tag , that is we hv passed a tag as deletelink
                success:function(data){
                    $(`#post-${data.data.post_id}`).remove();
                    new Noty({
                        theme: 'relax',
                        text: "Post Deleted",
                        type: 'success',
                        layout: 'topRight',
                        timeout: 1500
                        
                    }).show();

                },error:function(error){
                    console.log(error.responseText);
                }
            });
        });
    }

    // loop over all the existing posts on the page (when the window loads for the first time) and call the delete post method on delete link of each, also add AJAX (using the class we've created) to the delete button of each
    let convertPostsToAjax = function(){
        $('#posts-list-container>ul>li').each(function(){
            let self = $(this);
            let deleteButton = $(' .delete-post-button', self);
            deletePost(deleteButton);

            // get the post's id by splitting the id attribute
            let postId = self.prop('id').split("-")[1]
            new PostComments(postId);
        });
    }

    createPost();
    convertPostsToAjax();
} 


125)post_controller=>updated req.xhr in both func
const Post=require('../models/post');
const Comment=require('../models/comment');
module.exports.create=async function(req,res)
{
    try{
        let post=await Post.create({
            //we have got the post schema above
            //now can access content,user
            //here user._id (can refer in robo3t)
            //req.body.content is bcoz we hv given name of form as content
            content:req.body.content,
            user:req.user._id
        });

        //if the req is in xhml http request i.e via ajax
        if(req.xhr){
            // if we want to populate just the name of the user (we'll not want to send the password in the API), this is how we do it!
            post = await post.populate('user','name');
            return res.status(200).json({
                data:{
                    post:post
                },
                message:"Post created!"
            })
        }

        req.flash('success','Post published!');
        return res.redirect('back');
    }catch(err)
    {
        req.flash('error',err);
        
        return res.redirect('back');
    }
}

//will be deleting according to action=> /posts/destroy/:id
//in params there would be id of post
module.exports.destroy=async function(req,res){
    try{
        let post=await Post.findById(req.params.id);
        //.id means converting the object id (._id) to string
        if(post.user==req.user.id)
        {
            post.remove();
            await Comment.deleteMany({
                post:req.params.id
            });

            if(req.xhr)
            {
                return res.status(200).json({
                    data:{
                        post_id:req.params.id
                    },
                    message:"Post Deleted"
                });
            }

            req.flash('success','Post and associated comments deleted!')
            return res.redirect('back');
        }else{
            req.flash('error','You cannot delete this post');
            return res.redirect('back');
        }
    }catch(err)
    {
        req.flash('error',err);
        return res.redirect('back');
    }
    
}

126)home.ejs
<!-- importing this script for creating the comments -->
<script src="/js/home_post_comments.js" ></script>

127)_comment.ejs=>added ids to li  and class to a tag
<li id="comment-<%= comment._id %>">
    <p>
        <% if (locals.user && locals.user.id == comment.user.id){ %>
        
        <small>
            <a class="delete-comment-button" href="/comments/destroy/<%= comment.id %>">X</a>
        </small>
        <% } %>
        <%= comment.content %>
        <br>
        <small>
            <%= comment.user.name %>
        </small>
    </p>    
</li>

128)comments_controller.js=>req.xhr funcs
const Comment=require('../models/comment');
const Post=require('../models/post');
const User=require('../models/user');

module.exports.create=async function(req,res){
    try{
        //req.body.post as we hv given name as post in input with type hidden
        let post=await Post.findById(req.body.post)
        if(post)
        {
            let comment=await Comment.create({
                content:req.body.content,
                post:req.body.post,
                user:req.user._id
            });
            //updating the posts schema as well that is pushing the comment in the comments array
            post.comments.push(comment);
            post.save();

            if (req.xhr){
                // Similar for comments to fetch the user's id!
                comment = await comment.populate('user','name');
    
                return res.status(200).json({
                    data: {
                        comment:comment,
                    },
                    message: "Post created!"
                });
            }

            req.flash('success','Comment added!');
            res.redirect('/');
        }
    }catch(err)
    {
        req.flash('error',err);
        res.redirect('/');
    }
}

module.exports.destroy=async function(req,res){
    try{
        let comment=await Comment.findById(req.params.id);
        if(comment.user==req.user.id){
            //since we also need to delete comment from the comments array of that particular post
            let postId=comment.post;
            comment.remove();
            //update by pull out from comments array the id with req.params.id that is comment id
            let post=await Post.findByIdAndUpdate(postId,{$pull:{comments:req.params.id}});
             // send the comment id which was deleted back to the views
             if (req.xhr){
                return res.status(200).json({
                    data: {
                        comment_id: req.params.id
                    },
                    message: "Post deleted"
                });
            }

            req.flash('success','Comment deleted!')
            return res.redirect('back');
        }
        else{
            req.flash('error','You cannot delete this comment');
            return res.redirect('back');
        }
    }catch(err)
    {
        req.flash('error',err);
        return res.redirect('back');
    }
}

129)home_post_comments.js in assets js
// Let's implement this via classes

// this class would be initialized for every post on the page
// 1. When the page loads
// 2. Creation of every post dynamically via AJAX

class PostComments{
    // constructor is used to initialize the instance of the class whenever a new instance is created
    constructor(postId){
        this.postId = postId;
        this.postContainer = $(`#post-${postId}`);
        this.newCommentForm = $(`#post-${postId}-comments-form`);

        this.createComment(postId);

        let self = this;
        // call for all the existing comments
        $(' .delete-comment-button', this.postContainer).each(function(){
            self.deleteComment($(this));
        });
    }


    createComment(postId){
        let pSelf = this;
        this.newCommentForm.submit(function(e){
            e.preventDefault();
            let self = this;

            $.ajax({
                type: 'post',
                url: '/comments/create',
                data: $(self).serialize(),
                success: function(data){
                    let newComment = pSelf.newCommentDom(data.data.comment);
                    $(`#post-comments-${postId}`).prepend(newComment);
                    pSelf.deleteComment($(' .delete-comment-button', newComment));

                    new Noty({
                        theme: 'relax',
                        text: "Comment published!",
                        type: 'success',
                        layout: 'topRight',
                        timeout: 1500
                        
                    }).show();

                }, error: function(error){
                    console.log(error.responseText);
                }
            });


        });
    }


    newCommentDom(comment){
        // I've added a class 'delete-comment-button' to the delete comment link and also id to the comment's li
        return $(`<li id="comment-${ comment._id }">
                        <p>
                            
                            <small>
                                <a class="delete-comment-button" href="/comments/destroy/${comment._id}">X</a>
                            </small>
                            
                            ${comment.content}
                            <br>
                            <small>
                                ${comment.user.name}
                            </small>
                        </p>    

                </li>`);
    }


    deleteComment(deleteLink){
        $(deleteLink).click(function(e){
            e.preventDefault();

            $.ajax({
                type: 'get',
                url: $(deleteLink).prop('href'),
                success: function(data){
                    $(`#comment-${data.data.comment_id}`).remove();

                    new Noty({
                        theme: 'relax',
                        text: "Comment Deleted",
                        type: 'success',
                        layout: 'topRight',
                        timeout: 1500
                        
                    }).show();
                },error: function(error){
                    console.log(error.responseText);
                }
            });

        });
    }
}

130)starting with file uploading
npm install multer

131)profile.ejs
also added enctype="multipart/form-data" to form
and input for file


<% if(user.id==profile_user.id){ %>
    <!-- if user matches then show the updation form otherwise just show profile info -->
    <form action="/users/update/<%=profile_user.id%>" method="POST" enctype="multipart/form-data">
        <input type="text" name="name" placeholder="Your Name" value="<%=profile_user.name%>" required>
        <input type="email" name="email" placeholder="Your Email" value="<%=profile_user.email%>" required>
        

        //input type file
        <input type="file" name="avatar" placeholder="Profile Picture">
        <input type="submit" value="UPDATE">
    </form>
<%}else{%>
    <p><%= profile_user.name%></p>
    <p><%= profile_user.email%></p>
<%}%>

132)user.js in models
//setting multer not in config but in models as we would require differenetly for post,user,comments
//we could have a centralised one but this too is a good approach
const multer=require('multer');
const path=require('path');
const AVATAR_PATH=path.join('/uploads/users/avatars');


133)user.js in models

created another field in user schema

avatar:{
    //we would be keeping the path of the place where the image is stored here
    type:String,
}

//and

let storage = multer.diskStorage({
    destination: function (req, file, cb) {
      cb(null, path.join(__dirname,'..',AVATAR_PATH));
      //__dirname is currently where we are+..+/uploads/users/avatars
      // this is the final path
    },
    filename: function (req, file, cb) {
      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9)
      cb(null, file.fieldname + '-' + uniqueSuffix);
      //here fieldname here is avatar ,the one defined in user schemma
    }
});

//static function
//to connect diskStorage to storage of multer=>the first storage is of multer and second one defined above
//.single('avatar') means that we can only send one file for particular to avatar not array of files like in post of pics(more than 1)
userSchema.statics.uploadedAvatar=multer({storage:storage}).single('avatar');
//want to make AVATAR_PATH public so defining it here so one can use User.avatarPath outside this file
userSchema.statics.avatarPath=AVATAR_PATH;

134)user_controller.js
module.exports.update= async function(req,res){
    // if(req.user.id==req.params.id){
    //     User.findByIdAndUpdate(req.params.id,req.body,function(err,User){
    //         req.flash('success','Profile Updated successfully!'); 
    //         return res.redirect('back');
    //     });
    // }else{
    //     //if someone tries to fiddle by inspect nd then change id then show http 401 unauthorized part
    //     return res.status(401).send('Unauthorized');
    // }


    if(req.user.id==req.params.id){
        try{
            let user=await User.findById(req.params.id);
            User.uploadedAvatar(req,res,function(err){
                if(err){console.log('*****Multer Error',err);}
                // console.log(req.file);
                //could not ready body of req without multer as form encytype is multipart
                user.name=req.body.name;
                user.email=req.body.email;
                if(req.file){
                    //if user already has a file before then delete the previous one and save the new one, making storage efficient
                    if(user.avatar){
                        fs.unlinkSync(path.join(__dirname,'..',user.avatar));
                    }
                    
                    //this is saving the path of the uploaded file into the avatar field in the user
                    user.avatar=User.avatarPath+'/'+req.file.filename;
                }
                user.save();
                return res.redirect('back');
            })

        }catch(err)
        {
            req.flash('error',err);
            return res.redirect('back');
        }
    }else{
        //if someone tries to fiddle by inspect nd then change id then show http 401 unauthorized part
        req.flash('error','Unauthorized!');
        return res.status(401).send('Unauthorized');
    }
}

135)profile.ejs
<img src="<%=user.avatar%>" alt="<%=user.name%>" width="100">


136)index.js
//make the uploads path available to the browser
app.use('/uploads',express.static(__dirname+'/uploads'));


137)profile.ejs
added preview of apic while uploading 
<!-- whatever u write here will be rendered to body of the layout -->
<link rel="stylesheet" href="/css/user_profile.css">

<img src="<%=user.avatar%>" alt="<%=user.name%>" width="100" id="profile_pic">

<!-- user available bcoz we made res.locals.user=req.user in passport.js -->
<!-- <p><%= user.name%></p>
<p><%= user.email%></p> -->


<% if(user.id==profile_user.id){ %>
    <!-- if user matches then show the updation form otherwise just show profile info -->
    <form action="/users/update/<%=profile_user.id%>" method="POST" enctype="multipart/form-data"  >
        <input type="text" name="name" placeholder="Your Name" value="<%=profile_user.name%>" required>
        <input type="email" name="email" placeholder="Your Email" value="<%=profile_user.email%>" required>
        
        <input type="file" name="avatar" placeholder="Profile Picture" id="inpFile">
        <input type="submit" value="UPDATE">
    </form>
<%}else{%>
    <p><%= profile_user.name%></p>
    <p><%= profile_user.email%></p>
<%}%>

<script>
    //for preview of file before upload
    const inpFile=document.getElementById('inpFile');
    const profile_pic=document.getElementById('profile_pic');
    inpFile.addEventListener("change",function(){
        const file=this.files[0];
        if(file)
        {
            // console.log("hello");
            const reader=new FileReader();
            reader.addEventListener("load",function(){
                profile_pic.setAttribute("src",this.result);
            });
            reader.readAsDataURL(file);
        }
    });
</script>

138)index.js routes
router.use('/api',require('./api'));

139)index.js in api in routes
const express=require('express');
const router=express.Router();
router.use('/v1',require('./v1'));
module.exports=router;

140)index.js in v1 in api in routes
const express=require('express');
const router=express.Router();
router.use('/posts',require('./posts'));
module.exports=router;

141)posts.js in v1 in api in routes
const express=require('express');
const router=express.Router();
const postsApi=require("../../../controllers/api/v1/posts_api");
router.get('/',postsApi.index);

module.exports=router;

142)posts_api.js in v1 in api in controllers
module.exports.index=function(req,res){
    return res.json(200,{
        message:"List of Posts",
        posts:[]
    })
}

//deleting post through api without authentication

143)posts.js in v1 in api in routes
router.delete('/:id',postsApi.destroy);

144)posts_api.js in v1 in api in controllers
const Post=require('../../../models/post');
const Comment=require('../../../models/comment');

module.exports.index=async function(req,res){
    let posts=await Post.find({})
    .sort('-createdAt')//sort acc to time of creation=>latest one showimg first
    .populate('user')
    .populate({
        path:'comments',//as we have name the array in post schema as comments
        populate:{
            path:'user'//name the user in post schema as user
        }
    });
    return res.json(200,{
        message:"List of Posts",
        posts:posts
    })
}
module.exports.destroy=async function(req,res){
    try{
        let post=await Post.findById(req.params.id);
            post.remove();
            await Comment.deleteMany({
                post:req.params.id
            });
            return res.status(200).json({
                message:"Post and associated comments deleted successfully"
            });
    }catch(err)
    {
        return res.status(500).json({
            message:"Internal Server Error"
        });  
     }
}

145)starting with jwt
npm install passport-jwt

146)index.js
const passportJWT=require('./config/passport-jwt-strategy');


147)passport-jwt-strategy.js in config

const passport=require('passport');
const JWTStrategy=require('passport-jwt').Strategy;
const ExtractJWT=require('passport-jwt').ExtractJwt;
const User=require('../models/user');

let opts={
    //extract from bearer inside authorization inside header
    jwtFromRequest:ExtractJWT.fromAuthHeaderAsBearerToken(),
    //key to encrypt
    secretOrKey:'codeial',
}


//store the user info in payload
passport.use(new JWTStrategy(opts,function(jwtPayLoad,done){
    User.findById(jwtPayLoad._id,function(err,user){
        if(err){
            console.log('Error in finding user from JWT');
            return;
        }
        if(user)
        {
            return done(null,user);
        }
        else{
            return done(null,false);
        }
    })
}));

module.exports=passport;

148)creating our own token for apis
npm install jsonwebtoken

149)users_api.js in v1 in api in controller
//creating token for user signing in using api

const User=require('../../../models/user');
const jwt=require('jsonwebtoken');
module.exports.createSession=async function(req,res)
{
    try {
        let user=await User.findOne({email:req.body.email});
        if(!user || user.password!=req.body.password){
            return res.status(422).json({
                message:'Invalid username or password'
            })
        }
        return res.status(200).json({
            message:'Sign in successful, here is your token , please keep it safe!',
            data:{
                token:jwt.sign(user.toJSON(),'codeial',{expiresIn:1000000})
            }
        })

    } catch (err) {
        return res.status(500).json({
            message:"Internal Server Error"
        });
    }
} 

150)users.js in v1 in api in routes
const express=require('express');
const router=express.Router();
const usersApi=require('../../../controllers/api/v1/users_api');
router.post('/create-session',usersApi.createSession);
module.exports=router;

151)index.js in v1 in api in routes
router.use('/users',require('./users'));

152)posts.js in v1 in api in route

const express=require('express');
const router=express.Router();
const passport=require('passport');
const postsApi=require("../../../controllers/api/v1/posts_api");
router.get('/',postsApi.index);

//strategy would be jwt, session:false =>do not want session cookies to be generated
router.delete('/:id',passport.authenticate('jwt',{session:false}),postsApi.destroy);
module.exports=router;

153)posts_api.js in v1 in api in controllers
//updated with user id check

module.exports.destroy=async function(req,res){
    try{
        let post=await Post.findById(req.params.id);
        if(post.user==req.user.id){
            post.remove();
            await Comment.deleteMany({
                post:req.params.id
            });
            return res.status(200).json({
                message:"Post and associated comments deleted successfully"
            });
        }else{
            return res.status(401).json({
                message:"You cannot delete this post"
            });
        }
    }catch(err)
    {
        return res.status(500).json({
            message:"Internal Server Error"
        });  
     }
}

154)starting with google auth
search on google=> console.developers.com
create project =>(we have name project as Codeial)
go to credentials ,create credential
do auth consent screen verification
then
back to create credentials
authorized javascript origin
http://localhost:8080

authorized redirect uris
http://localhost:8080/users/auth/google/callback

u get client id and client secret

155)terminal
npm install passport-google-oauth
npm install crypto


156)passport-google-oauth2-strategy.js

const passport=require('passport');
const googleStrategy=require('passport-google-oauth').OAuth2Strategy;
const crypto=require('crypto');
const User=require('../models/user');


//tell passport to use a new strategy for google login
passport.use(new googleStrategy({
        //below info get from console.developers.com =>go to codeial project created
        clientID:"399691637146-fg31phq30hvpkh9qjijdicb79j59urle.apps.googleusercontent.com",
        clientSecret:"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",
        callbackURL:"http://localhost:8080/users/auth/google/callback",
    },
    function(accessToken,refreshToken,profile,done){
        //find a user
        User.findOne({email:profile.emails[0].value}).exec(function(err,user){
            if(err){
                console.log('error in google strategy passport',err);
                return;
            }
            console.log(profile);
            if(user){
                //if found then set this user as req.user
                return done(null,user);
            }else{
                //if user not found then signup i.e create the user and set it as req.user
                User.create({
                    name:profile.displayName,
                    email:profile.emails[0].value,
                    password:crypto.randomBytes(20).toString('hex'),
                },function(err,user){
                    if(err){
                        console.log('error in creating user  google strategy passport',err);
                        return;
                    }
                    else{
                        return done(null,user);
                    }
                })
            }
        })
    }
));

module.exports=passport;

157)users.js in routes
//the one below is automatically understood by passport-google(as given in documentation)
router.get('/auth/google',passport.authenticate('google',{scope:['profile','email']}));
//this is the callback route
router.get('/auth/google/callback',passport.authenticate('google',{failureRedirect:'/users/sign-in'}),usersController.createSession);

158)index.js
const passportGoogle=require('./config/passport-google-oauth2-strategy');

159)user_sign_in.js and user_sign_up.js in views
<p>
    <a href="/users/auth/google">Google Sign In/Sign Up</a>
</p>   


160)npm install nodemailer

161)nodemailer.js in config
const nodemailer=require('nodemailer');
const ejs=require('ejs');
const path=require('path');

let transporter=nodemailer.createTransport({
    service:'gmail',
    //go to gmail smtp settings on google
    //from there get the host for gmail,port:587 is for tls (transport layer secure )
    host:'smtp.gmail.com',
    port:587,
    secure:false,
    auth:{
        user:'codeialapplication@gmail.com',
        //go to this email =>security=>do 2 step verification=>then app password=>then for mail for windows computer=>generate password=>use that password here 
        pass:'utfmapramalrfgzv'
    }
});

let renderTemplate=(data,relativePath)=>{
    let mailHTML;
    ejs.renderFile(
        path.join(__dirname,'../views/mailers',relativePath),
        data,
        function(err,template){
            if(err){
                console.log('error in rendering template');return;
            }
            mailHTML=template;
        }
    )
    return mailHTML;
}

module.exports={
    transporter:transporter,
    renderTemplate:renderTemplate
}

162)comments_mailer.js in mailers
const nodeMailer=require('../config/nodemailer');


//this is another way of exporting a method instead of module.exports just to be familiar with this too
exports.newComment=(comment)=>{
    console.log('inside newcomment mailer');
    nodeMailer.transporter.sendMail({
        from:"codeialapplication@gmail.com",
        to:comment.user.email,
        subject:"New Comment Published",
        html:'<h1>YUP,your comment is published! </h1>'
    },(err,info)=>{
        if(err)
        {
            console.log('error in sending mail',err);
            return;
        }
        console.log('message sent',info);
        return;
    });
}

163)comments_controller
inside create function(check this in the file)

//since we would be requiring name and email of user at various places
//like user.email 
comment = await comment.populate('user','name email');
commentsMailer.newComment(comment);

164)comments_mailer.js
//changed html part now using template

const nodeMailer=require('../config/nodemailer');
//this is another way of exporting a method instead of module.exports just to be familiar with this too
exports.newComment=(comment)=>{
    let htmlString=nodeMailer.renderTemplate({
        comment:comment
    },'/comments/new_comment.ejs');
    nodeMailer.transporter.sendMail({
        from:"codeialapplication@gmail.com",
        to:comment.user.email,
        subject:"New Comment Published",
        html:htmlString
    },(err,info)=>{
        if(err)
        {
            console.log('error in sending mail',err);
            return;
        }
        console.log('message sent',info);
        return;
    });
}


165)new_comment.ejs in comments in  mailers in views
<div>
    <p>Hi <%=comment.user.name%>!</p>
    <p>Your comment <strong><%=comment.content%></strong> just got published on codeial</p>
    <p>Thanks! </p>
</div>

166)starting with delayed jobs
npm install kue

167)//Redis

168)like.js in model
const mongoose=require('mongoose');
const likeSchema=new mongoose.Schema({
    user:{
        type:mongoose.Schema.Types.ObjectId,
    },
    //this defines the object id of the liked object
    likeable:{
        type:mongoose.Schema.Types.ObjectId,
        required:true,
        refPath:'onModel'
    },
    //this field is used for defining the type of liked object since this is a dynamic reference
    onModel:{
        type:String,
        required:true,
        enum:['Post','Comment']
    }
},{
    timestamps:true
});

const Like=mongoose.model('Like',likeSchema);
module.exports=Like; 


169)updating comment.js and post.js in model in schema
likes:[
        {
            type:mongoose.Schema.Types.ObjectId,
            ref:'Like'
        }
    ]

170)index.js in routes
router.use('/likes',require('./likes'));

171)like.js in routes
const express=require('express');
const router=express.Router();
const LikesController=require('../controllers/likes_controller');

router.post('/toggle',LikesController.toggleLike);
module.exports=router;


172)likes_controller.js
const Like=require('../models/like');
const Post=require('../models/post');
const Comment=require('../models/comment');

module.exports.toggleLike=async function(req,res){
    try {
        //likes/toggle/?id=abcded&type=Post
        let likeable;
        let deleted=false;
        if(req.query.type=='Post')
        {
            likeable=await Post.findById(req.query.id).populate('likes');
        }
        else{
            likeable=await Comment.findById(req.query.id).populate('likes');
        }

        //check if like already exits
        let existingLike=await Like.findOne({
            likeable:req.query.id,
            onModel:req.query.type,
            user:req.user._id
        })


        //if a like already exists delete it
        if(existingLike){
            likeable.likes.pull(existingLike._id);
            likeable.save();
            existingLike.remove();
            deleted=true;
        }
        //add like
        else{
            let newLike=await Like.create({
                user:req.user._id,
                likeable:req.query.id,
                onModel:req.query.type
            });
            likeable.likes.push(newLike._id);
            likeable.save();
        }
        return res.json(200,{
            message:"Request successful!",
            data:{
                deleted:deleted
            }
        })
    } catch (err){
        console.log(err);
        return res.json(500,{
            message:'Internal server error'
        });
    }
}

173)home_controller.js
//populated likes in each post and comment

module.exports.home= async function(req,res)
{
    try{
        let posts=await Post.find({})
        .sort('-createdAt')//sort acc to time of creation=>latest one showimg first
        .populate('user')
        .populate({
            path:'comments',//as we have name the array in post schema as comments
            populate:{
                path:'user'//name the user in post schema as user
            },
            //populate the likes of each post and comment
            populate: {
                path: 'likes'
            }
        }).populate('comments')
        .populate('likes');

        let users=await User.find({});

        return res.render('home',{
            title:'Codeial | Home',
            posts:posts,
            all_users:users
        });
    }catch(err){
        console.log('Error',err);
        return; 
    }
}

174)post_controller.js
// CHANGE :: delete the associated likes for the post and all its comments' likes too
module.exports.destroy=async function(req,res){
    try{
        let post=await Post.findById(req.params.id);
        //.id means converting the object id (._id) to string
        if(post.user==req.user.id)
        {

            // CHANGE :: delete the associated likes for the post and all its comments' likes too
            await Like.deleteMany({likeable: post, onModel: 'Post'});
            await Like.deleteMany({_id: {$in: post.comments}});


            post.remove();
            await Comment.deleteMany({
                post:req.params.id
            });

            if(req.xhr)
            {
                return res.status(200).json({
                    data:{
                        post_id:req.params.id
                    },
                    message:"Post Deleted"
                });
            }

            req.flash('success','Post and associated comments deleted!')
            return res.redirect('back');
        }else{
            req.flash('error','You cannot delete this post');
            return res.redirect('back');
        }
    }catch(err)
    {
        req.flash('error',err);
        return res.redirect('back');
    }
    
}

175)comments_controller.js
in module.exports.destroy

// CHANGE :: destroy the associated likes for this comment
await Like.deleteMany({likeable: comment._id, onModel: 'Comment'});

176)_post.ejs
(check where it has been added)
<!-- CHANGE :: display the likes of this post, if the user is logged in, then show the link to toggle likes, else, just show the count -->
<br>
    <!-- study about the data attribute -->
<small>
    <% if (locals.user){ %>
        <a class="toggle-like-button" data-likes="<%= post.likes.length %>" href="/likes/toggle/?id=<%=post._id%>&type=Post">
                <%= post.likes.length %> Likes
        </a>
    <% }else{ %>
        <%= post.likes.length %> Likes
    <% } %>
</small>

177)_comment.ejs
<!-- CHANGE :: display the likes of this comment, if the user is logged in, then show the link to toggle likes, else, just show the count -->
<!-- study about the data attribute -->
<small>
    <% if (locals.user){ %>
        <a class="toggle-like-button" data-likes="<%= comment.likes.length %>" href="/likes/toggle/?id=<%=comment._id%>&type=Comment">
                <%= comment.likes.length %> Likes
        </a>
    <% }else{ %>
        <%= comment.likes.length %> Likes
    <% } %>
</small>


178)home_posts.js in js in assets
{
    //method to submit the form data for new post using ajax
   let createPost=function(){
       //getting form from home.ejs id
       let newPostForm=$('#new-post-form');
       //preventing default action of submit as we need to submit through ajax
       newPostForm.submit(function(e){
           e.preventDefault();
           //now submitting through ajax
           $.ajax({
               type:'post',
               url:'/posts/create',
               //converts post data into json like content becomes key and value is the one entered
               data:newPostForm.serialize(),
               success:function(data){
                   // console.log(data);
                   //data.data.post can be seen as when we learnt api ,u can console log data on that u can see data in that post
                   let newPost=newPostDom(data.data.post);
                   $('#posts-list-container>ul').prepend(newPost);
                   deletePost($(' .delete-post-button',newPost));//space before class name here to adjust newPost
                   
                    // call the create comment class
                    new PostComments(data.data.post._id);

                    // CHANGE :: enable the functionality of the toggle like button on the new post
                    new ToggleLike($(' .toggle-like-button', newPost));

                   new Noty({
                       theme: 'relax',
                       text: "Post published!",
                       type: 'success',
                       layout: 'topRight',
                       timeout: 1500
                       
                   }).show();

               },error:function(error){
                   console.log(error.responseText);
               }
           });
       });
   }

   //method to create a post in dom
   let newPostDom=function(post){
       //copied from _post.ejs and removed unnecessary checks
      // CHANGE :: show the count of zero likes on this post
        return $(`<li id="post-${post._id}">
        <p>
            
            <small>
                <a class="delete-post-button"  href="/posts/destroy/${ post._id }">X</a>
            </small>
            
            ${ post.content }
            <br>
            <small>
            ${ post.user.name }
            </small>
            <br>
            <small>
                    <a class="toggle-like-button" data-likes="0" href="/likes/toggle/?id=${post._id}&type=Post">
                        0 Likes
                    </a>
                
            </small>

        </p>
        <div class="post-comments">
            <form id="post-${ post._id }-comments-form" action="/comments/create" method="POST">
                <input type="text" name="content" placeholder="Type Here to add comment..." required>
                <input type="hidden" name="post" value="${post._id}" >
                <input type="submit" value="Add Comment">
            </form>

            <div class="post-comments-list">
                <ul id="post-comments-${post._id}"> 
                </ul>
            </div>
        </div>
    </li>
       `)
   }

   //method to delete a post from dom using ajax
   let deletePost=function(deleteLink){
       $(deleteLink).click(function(e){
           e.preventDefault();

           $.ajax({
               type:'get',
               url:$(deleteLink).prop('href'),//get href part from a tag , that is we hv passed a tag as deletelink
               success:function(data){
                   $(`#post-${data.data.post_id}`).remove();
                   new Noty({
                       theme: 'relax',
                       text: "Post Deleted",
                       type: 'success',
                       layout: 'topRight',
                       timeout: 1500
                       
                   }).show();

               },error:function(error){
                   console.log(error.responseText);
               }
           });
       });
   }

   // loop over all the existing posts on the page (when the window loads for the first time) and call the delete post method on delete link of each, also add AJAX (using the class we've created) to the delete button of each
   let convertPostsToAjax = function(){
       $('#posts-list-container>ul>li').each(function(){
           let self = $(this);
           let deleteButton = $(' .delete-post-button', self);
           deletePost(deleteButton);

           // get the post's id by splitting the id attribute
           let postId = self.prop('id').split("-")[1]
           new PostComments(postId);
       });
   }

   createPost();
   convertPostsToAjax();
} 


179)home_post_comments.js in js in assets
// Let's implement this via classes

// this class would be initialized for every post on the page
// 1. When the page loads
// 2. Creation of every post dynamically via AJAX

class PostComments{
    // constructor is used to initialize the instance of the class whenever a new instance is created
    constructor(postId){
        this.postId = postId;
        this.postContainer = $(`#post-${postId}`);
        this.newCommentForm = $(`#post-${postId}-comments-form`);

        this.createComment(postId);

        let self = this;
        // call for all the existing comments
        $(' .delete-comment-button', this.postContainer).each(function(){
            self.deleteComment($(this));
        });
    }


    createComment(postId){
        let pSelf = this;
        this.newCommentForm.submit(function(e){
            e.preventDefault();
            let self = this;

            $.ajax({
                type: 'post',
                url: '/comments/create',
                data: $(self).serialize(),
                success: function(data){
                    let newComment = pSelf.newCommentDom(data.data.comment);
                    $(`#post-comments-${postId}`).prepend(newComment);
                    pSelf.deleteComment($(' .delete-comment-button', newComment));
                    
                    // CHANGE :: enable the functionality of the toggle like button on the new comment
                    new ToggleLike($(' .toggle-like-button', newComment));

                    new Noty({
                        theme: 'relax',
                        text: "Comment published!",
                        type: 'success',
                        layout: 'topRight',
                        timeout: 1500
                        
                    }).show();

                }, error: function(error){
                    console.log(error.responseText);
                }
            });


        });
    }


    newCommentDom(comment){
        // I've added a class 'delete-comment-button' to the delete comment link and also id to the comment's li
        // CHANGE :: show the count of zero likes on this comment

    return $(`<li id="comment-${ comment._id }">
                <p>
                    
                    <small>
                        <a class="delete-comment-button" href="/comments/destroy/${comment._id}">X</a>
                    </small>
                    
                    ${comment.content}
                    <br>
                    <small>
                        ${comment.user.name}
                    </small>
                    <small>
                    
                        <a class="toggle-like-button" data-likes="0" href="/likes/toggle/?id=${comment._id}&type=Comment">
                            0 Likes
                        </a>
                    
                    </small>

                </p>    

            </li>`);
    }


    deleteComment(deleteLink){
        $(deleteLink).click(function(e){
            e.preventDefault();

            $.ajax({
                type: 'get',
                url: $(deleteLink).prop('href'),
                success: function(data){
                    $(`#comment-${data.data.comment_id}`).remove();

                    new Noty({
                        theme: 'relax',
                        text: "Comment Deleted",
                        type: 'success',
                        layout: 'topRight',
                        timeout: 1500
                        
                    }).show();
                },error: function(error){
                    console.log(error.responseText);
                }
            });

        });
    }
}

180)home.ejs in views
<!-- CHANGE :: import the script file for toggle likes, also run it over for the already present posts and comments on the page -->
<script src="js/toggle_likes.js"></script>
<script>
    $('.toggle-like-button').each(function(){
        let self = this;
        let toggleLike = new ToggleLike(self);
    });
</script>


181)toggle_likes.js in js in assets

// CHANGE :: create a class to toggle likes when a link is clicked, using AJAX
class ToggleLike{
    constructor(toggleElement){
        this.toggler = toggleElement;
        this.toggleLike();
    }


    toggleLike(){
        $(this.toggler).click(function(e){
            e.preventDefault();
            let self = this;

            // this is a new way of writing ajax which you might've studied, it looks like the same as promises
            $.ajax({
                type: 'POST',
                url: $(self).attr('href'),
            })
            .done(function(data) {
                let likesCount = parseInt($(self).attr('data-likes'));
                console.log(likesCount);
                if (data.data.deleted == true){
                    likesCount -= 1;
                    
                }else{
                    likesCount += 1;
                }


                $(self).attr('data-likes', likesCount);
                $(self).html(`${likesCount} Likes`);

            })
            .fail(function(errData) {
                console.log('error in completing the request');
            });
        });
    }
}

182)_chat_box.ejs
<%if(locals.user){%>
    <div id="user-chat-box">
        <ul id="chat-messages-list">
            <li class="other-message">
                <span>Other Message</span>
            </li>
            <li class="self-message">
                <span>Self Message</span>
            </li>
        </ul>
        <div id="chat-message-input-container">
            <input type="text" id="chat-message-input" placeholder="Type message here..">
            <button id="send-message">Send</button>
        </div>
    </div>
<%}%>

183)chat_box.scss
// CHANGE :: add styling for the chat box
#user-chat-box{
    position: fixed;
    bottom: 10px;
    right: 10px;
    border: 1px dashed grey;
    height: 350px;
	width: 300px;
	background: white;
	padding: 5px;
	box-shadow: 1px 1px 1px 1px lightgrey;

    #chat-messages-list{
    	list-style: none;
	    padding: 10px;
	    height: 70%;
	    background-color: white;
	    overflow: auto;

	    .other-message{
		    text-align: left;
		    padding: 5px;
		    span{
		    	display: inline-block;
	    		padding: 15px;
		    	background-color: #ffa0a0;
		    }
		    
	    }

	    .self-message{
		    text-align: right;
		    padding: 5px;
		   
		    span{
		    	 
	    		display: inline-block;
	    		padding: 15px;
    			background-color: #a0dcff;
		    }
		   
	    }

    }
    #chat-message-input-container{
    	    // height: 24%;
		    width: 100%;
		    display: flex;
		    flex-direction: row;

		    #chat-message-input{
	    	    height: 30%;
    			width: 70%;
		    }

		    #send-message{
	    	    height: 50%;
			    width: 30%;
			    font-size: 25px;
			    color: white;
			    border: none;
			    background: #58d258;
		    }
	    }
}


184)home.ejs
<link rel="stylesheet" href="/css/home.css">
<link rel="stylesheet" href="/css/chat_box.css">
<div id="home-container">
    <section id="feed-posts">
        <h2>Posts</h2>
        <!-- only if user is signed in view post input area -->
        <%if(locals.user){%>
            <form action="/posts/create" id="new-post-form" method="POST">
                <textarea name="content" cols="30" rows="3" placeholder="Type Here..." required></textarea>
                <input type="submit" value="Post">
            </form>
        <%}%>
        <div id="posts-list-container">
            <ul>
                <%for(post of posts){%>
                    <%- include('_post') -%>
            <%}%>
            </ul>
        </div>
    </section>
    
    <section id="user-friends">
        <h4>Friends</h4>
        <% for(u of all_users){%>
            <p>
                <a href="/users/profile/<%=u.id%>"><%= u.name%></a>
            </p>
        <%}%>
    </section>
    <%- include('_chat_box') -%>
</div>

<!-- importing this script for creating the comments -->
<script src="/js/home_post_comments.js" ></script>
<script src="/js/home_posts.js"></script>

<!-- CHANGE :: import the script file for toggle likes, also run it over for the already present posts and comments on the page -->
<script src="js/toggle_likes.js"></script>
<script>
    $('.toggle-like-button').each(function(){
        let self = this;
        let toggleLike = new ToggleLike(self);
    });
</script>

185)npm install socket.io

186)home.ejs
<!-- from https://cdnjs.com/libraries/socket.io -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.5.1/socket.io.js"></script>
<script src="/js/chat_engine.js"></script>

187)index.js
//setup chat server to be used with socket.io
const chatServer=require('http').Server(app);
const chatSockets=require('./config/chat_sockets').chatSockets(chatServer);
chatServer.listen(5000);
console.log('chat server is listening on port 5000');

188)chat_engine.js in js in assets
class ChatEngine{
    constructor(chatBoxId,userEmail){
        this.chatBox=$(`#${chatBoxId}`);
        this.userEmail=userEmail;

        this.socket=io.connect('http://localhost:5000');

        if(this.userEmail){
            this.connectionHandler();
        }
    }

    connectionHandler(){
        this.socket.on('connect',function(){
            console.log('connection established using sockets...!');
        });
    }
}

189)chat_sockets.js in config
module.exports.chatSockets=function(socketServer){
    let io=require('socket.io')(socketServer);

    io.sockets.on('connection',function(socket){
        console.log('new connection received ',socket.id);

        socket.on('disconnect',function(){
            console.log('socket disconnected!');
        });
    });
}

190)home.ejs
<% if(locals.user){%>
    <script >
        new ChatEngine('user-chat-box','<%= locals.user._id %>');
    </script>
<%}%>

191)chat_engine.js in js in assets
class ChatEngine{
    constructor(chatBoxId,userEmail){
        this.chatBox=$(`#${chatBoxId}`);
        this.userEmail=userEmail;

        this.socket=io.connect('http://localhost:5000');

        if(this.userEmail){
            this.connectionHandler();
        }
    }

    connectionHandler(){
        let self=this;

        this.socket.on('connect',function(){
            console.log('connection established using sockets...!');
            
            self.socket.emit('join_room',{
                user_email:self.userEmail,
                chatroom:'codeial'
            });

            self.socket.on('user_joined',function(data){
                console.log('a user joined!',data);
            })
        });
    }
}

192)chat_sockets.js in config

module.exports.chatSockets=function(socketServer){
    let io=require('socket.io')(socketServer);

    io.sockets.on('connection',function(socket){
        console.log('new connection received ',socket.id);

        socket.on('disconnect',function(){
            console.log('socket disconnected!');
        });

        socket.on('join_room',function(data){
            console.log('joining request received',data);
            socket.join(data.chatroom);
            io.in(data.chatroom).emit('user_joined',data);
        })
    });
}


193)chat_engine
class ChatEngine{
    constructor(chatBoxId,userEmail){
        this.chatBox=$(`#${chatBoxId}`);
        this.userEmail=userEmail;

        this.socket=io.connect('http://localhost:5000');

        if(this.userEmail){
            this.connectionHandler();
        }
    }

    connectionHandler(){
        let self=this;

        this.socket.on('connect',function(){
            console.log('connection established using sockets...!');
            
            self.socket.emit('join_room',{
                user_email:self.userEmail,
                chatroom:'codeial'
            });

            self.socket.on('user_joined',function(data){
                console.log('a user joined!',data);
            })
        });
        // CHANGE :: send a message on clicking the send message button
        $('#send-message').click(function(){
            let msg = $('#chat-message-input').val();

            if (msg != ''){
                self.socket.emit('send_message', {
                    message: msg,
                    user_email: self.userEmail,
                    chatroom: 'codeial'
                });
            }
        });

        self.socket.on('receive_message', function(data){
            console.log('message received', data.message);


            let newMessage = $('<li>');

            let messageType = 'other-message';

            if (data.user_email == self.userEmail){
                messageType = 'self-message';
            }

            newMessage.append($('<span>', {
                'html': data.message
            }));

            newMessage.append($('<sub>', {
                'html': data.user_email
            }));

            newMessage.addClass(messageType);

            $('#chat-messages-list').append(newMessage);
        })
    }
}


194)chat_sockets.js

module.exports.chatSockets=function(socketServer){
    let io=require('socket.io')(socketServer);

    io.sockets.on('connection',function(socket){
        console.log('new connection received ',socket.id);

        socket.on('disconnect',function(){
            console.log('socket disconnected!');
        });

        socket.on('join_room',function(data){
            console.log('joining request received',data);
            socket.join(data.chatroom);
            io.in(data.chatroom).emit('user_joined',data);
        })
        
        // CHANGE :: detect send_message and broadcast to everyone in the room
        socket.on('send_message', function(data){
            io.in(data.chatroom).emit('receive_message', data);
        });

    });
}

*******starting with deployment(gulp)*******

195)environment.js in config
const development={
    name:'development',
    asset_path:'/assets',
    session_cookie_key:'blahsomething',
    db:'goSocial_development',
    smtp:{
        service:'gmail',
        //go to gmail smtp settings on google
        //from there get the host for gmail,port:587 is for tls (transport layer secure )
        host:'smtp.gmail.com',
        port:587,
        secure:false,
        auth:{
            user:'codeialapplication@gmail.com',
            //go to this email =>security=>do 2 step verification=>then app password=>then for mail for windows computer=>generate password=>use that password here 
            pass:'utfmapramalrfgzv'
        }
    },
    google_client_id:"399691637146-fg31phq30hvpkh9qjijdicb79j59urle.apps.googleusercontent.com",
    google_client_secret:"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",
    google_call_back_url:"ht tp://localhost:8000/users/auth/google/callback",
    jwt_secret:'codeial',
}

const production={
    name:'production'
}

module.exports=development;


196)index.js
const env=require('./config/environment');

const path=require('path');
app.use(sassMiddleware({
    src:path.join(__dirname,env.asset_path,'/scss'),
    dest:path.join(__dirname,env.asset_path,'/css'),
    debug:true,
    outputStyle:'extended',
    prefix:'/css'
}))

app.use(express.static(__dirname + env.asset_path));

app.use(session({
    name:'goSocial',
    //todo the secret before deployment in production mode
    //changed the secret part 
    secret:env.session_cookie_key,
    saveUninitialized:false,
    resave:false,
    cookie:{
        maxAge:(1000*60*100)
        //100 min =>1000 millisec,60sec
    },
    store:MongoStore.create({
        //got this url from mongodb atlas application
        mongoUrl:'mongodb://localhost:27017',
        autoRemove:'disabled'
    },function(err)
    {
        console.log(err || 'connect-mongo-db setup ok');
    })
}))


197)mongoose.js in config
const env=require('./environment');
mongoose.connect(`mongodb://localhost/${env.db}`);

198)nodemailer.js in config
const env=require('./environment');
let transporter=nodemailer.createTransport(env.smtp);

199)passport-jwt-strategy.js
const env=require('./environment');

let opts={
    //extract from bearer inside authorization inside header
    jwtFromRequest:ExtractJWT.fromAuthHeaderAsBearerToken(),
    //key to encrypt
    secretOrKey:env.jwt_secret,
}

200)passport-google-auth.js in config
const env=require('./environment');

//tell passport to use a new strategy for google login
passport.use(new googleStrategy({
        //below info get from console.developers.com =>go to codeial project created
        clientID:env.google_client_id,
        clientSecret:env.google_client_secret,
        callbackURL:env.google_call_back_url,
    },
*************rest same as before************


201)user_api in v1 in api in controllers
const env=require('./environment');
data:{
    token:jwt.sign(user.toJSON(),env.jwt_secret,{expiresIn:1000000})
}

202)environment.js
const development={
    name:'development',
    asset_path:'/assets',
    session_cookie_key:'blahsomething',
    db:'goSocial_development',
    smtp:{
        service:'gmail',
        //go to gmail smtp settings on google
        //from there get the host for gmail,port:587 is for tls (transport layer secure )
        host:'smtp.gmail.com',
        port:587,
        secure:false,
        auth:{
            user:'codeialapplication@gmail.com',
            //go to this email =>security=>do 2 step verification=>then app password=>then for mail for windows computer=>generate password=>use that password here 
            pass:'utfmapramalrfgzv'
        }
    },
    google_client_id:"399691637146-fg31phq30hvpkh9qjijdicb79j59urle.apps.googleusercontent.com",
    google_client_secret:"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",
    google_call_back_url:"http://localhost:8000/users/auth/google/callback",
    jwt_secret:'codeial',
}

//go and save all these in environment variables=>system variables
//CODEIAL_ENVIRONMENT="production" set in env variables
const production={
    name:'production',
    asset_path:process.env.CODEIAL_ASSET_PATH,
    //go to random key gen website, choose as per requirement
    session_cookie_key:process.env.CODEIAL_SESSION_COOKIE_KEY,
    db:process.env.CODEIAL_DB,
    smtp:{
        service:'gmail',
        //go to gmail smtp settings on google
        //from there get the host for gmail,port:587 is for tls (transport layer secure )
        host:'smtp.gmail.com',
        port:587,
        secure:false,
        auth:{
            user:process.env.CODEIAL_GMAIL_USERNAME,
            //go to this email =>security=>do 2 step verification=>then app password=>then for mail for windows computer=>generate password=>use that password here 
            pass:process.env.CODEIAL_GMAIL_PASSWORD,
        }
    },
    google_client_id:process.env.CODEIAL_GOOGLE_CLIENT_ID,
    google_client_secret:process.env.CODEIAL_GOOGLE_CLIENT_SECRET,
    google_call_back_url:process.env.CODEIAL_GOOGLE_CALLBACK_URL,
    jwt_secret:process.env.CODEIAL_JWT_SECRET,
}

module.exports=eval(process.env.CODEIAL_ENVIRONMENT)==undefined?development:eval(process.env.CODEIAL_ENVIRONMENT);

//set all the variables in environment variables=>system variables

203)package.json
added prod_start

"scripts": {
    "start": "nodemon index.js",
    "test": "echo \"Error: no test specified\" && exit 1",
    "prod_start":"NODE_ENV=production nodemon index.js"
  },

  204)to access NODE_ENV install
  npm install -g win-node-env

  205)index.js
  use sass middleware only in development mode
  if(env.name=='development')
{
    app.use(sassMiddleware({
        src:path.join(__dirname,env.asset_path,'/scss'),
        dest:path.join(__dirname,env.asset_path,'/css'),
        debug:true,
        outputStyle:'extended',
        prefix:'/css'
    }));
}

206)npm install morgan
npm install rotating-file-stream
to save logs while production



207)index.js
const logger=require('morgan');
app.use(logger(env.morgan.mode,env.morgan.options));


208)environment.js
const fs=require('fs');
const rfs=require('rotating-file-stream');
const path=require('path');

const logDirectory=path.join(__dirname,'../production_logs');
//if log directory exists then good otherwise create it using file system
fs.existsSync(logDirectory) || fs.mkdirSync(logDirectory);

const accessLogStream=rfs.createStream('access.log',{
    interval:'1d',
    path:logDirectory,
});

also in development part
morgan:{
    mode:'dev',
    options:{stream:accessLogStream}
}


and in production part
morgan:{
    mode:'combined',
    options:{stream:accessLogStream}
}

209)installing gulp
npm install gulp-cli -g
npm install gulp -D

210)for sass  compressing(css)
npm install gulp-sass
npm install gulp-cssnano
npm install gulp-rev

211)created public folder
inside public created assets=>css,images,js

212)gulpfile.js
const gulp=require('gulp');

//follow below syntax for importing gulp
const sass = require('gulp-sass')(require('node-sass'));
const cssnano=require('gulp-cssnano');
const rev=require('gulp-rev');

//final code for css is this.
gulp.task('css', (done) => {
    console.log('Minifying CSS');
    gulp.src('./assets/sass/**/*.scss')
    .pipe(sass())
    .pipe(cssnano())
    .pipe(gulp.dest('./assets.css'));
    console.log('Minified CSS');
    gulp.src('./assets/**/*.css')
    .pipe(rev())
    .pipe(gulp.dest('./public/assets'))
    .pipe(rev.manifest({
    cwd:'public',
    merge: true
})).pipe(
gulp.dest('./public/assets')
);
done();
})

213)in terminal 
gulp css
this will minify css files from assets and store it in public assets css as specified in dest


214)for images gulp
npm install gulp-imagemin@6.0.0

for js
npm install  gulp-uglify-es

also for all of them together
npm install del

215)gulpfile.js
const gulp=require('gulp');

//follow below syntax for importing gulp
const sass = require('gulp-sass')(require('node-sass'));
const cssnano=require('gulp-cssnano');
const rev=require('gulp-rev');
const imagemin=require('gulp-imagemin');
const uglify=require('gulp-uglify-es').default;
const del=require('del');





//final code for css is this.
gulp.task('css', (done) => {
    console.log('Minifying CSS');
    gulp.src('./assets/sass/**/*.scss')
    .pipe(sass())
    .pipe(cssnano())
    .pipe(gulp.dest('./assets.css'));
    console.log('Minified CSS');
    gulp.src('./assets/**/*.css')
    .pipe(rev())
    .pipe(gulp.dest('./public/assets'))
    .pipe(rev.manifest({
    cwd:'public',
    merge: true
})).pipe(
gulp.dest('./public/assets')
);
done();
})


gulp.task('js', function(done){
    console.log('minifying js...');
     gulp.src('./assets/**/*.js')
    .pipe(uglify())
    .pipe(rev())
    .pipe(gulp.dest('./public/assets'))
    .pipe(rev.manifest({
        cwd: 'public',
        merge: true
    }))
    .pipe(gulp.dest('./public/assets'));
    done()
});


gulp.task('images', function(done){
    console.log('compressing images...');
    gulp.src('./assets/**/*.+(png|jpg|gif|svg|jpeg)')
    .pipe(imagemin())
    .pipe(rev())
    .pipe(gulp.dest('./public/assets'))
    .pipe(rev.manifest({
        cwd: 'public',
        merge: true
    }))
    .pipe(gulp.dest('./public/assets'));
    done();
});


// empty the public/assets directory
gulp.task('clean:assets', function(done){
    //Use the below syntax for forcefully deleting the already available files.
    del.sync(['./public/assets'], { force:true });
    done();
});

gulp.task('build', gulp.series('clean:assets', 'css', 'js', 'images'), function(done){
    console.log('Building assets');
    done();
});


216)view-helpers.js in config

const env=require('./environment');
const fs=require('fs');
const path=require('path');

//this is to fetch the assets in production mode as we hv changed the files name by adding some hash string in public assets

module.exports=(app)=>{
    app.locals.assetPath=function(filePath){
        if(env.name=='development')
        {
            return filePath;
        }

        return '/' + JSON.parse(fs.readFileSync(path.join(__dirname,'../public/assets/rev-manifest.json')))[filePath];
    }
}

217)index.js after defining app
require('./config/view-helpers')(app);

**********change path in all view files***********
218)layout.ejs in views
<link rel="stylesheet" href="<%=assetPath('css/layout.css')%>">
<link rel="stylesheet" href="<%=assetPath('css/header.css')%>">
<link rel="stylesheet" href="<%=assetPath('css/footer.css')%>">
    
219)profile.ejs in views
<link rel="stylesheet" href="<%= assetPath('css/user_profile.css') %>">

220)home.ejs in views
<link rel="stylesheet" href="<%= assetPath('css/home.css') %>">
<link rel="stylesheet" href="<%= assetPath('css/chat_box.css') %>">


<script src="<%= assetPath('js/home_post_comments.js') %>" ></script>
<script src="<%= assetPath('js/home_posts.js') %>"></script>
<script src="<%= assetPath('js/toggle_likes.js') %>"></script>
<script src="<%= assetPath('js/chat_engine.js') %>"></script>
